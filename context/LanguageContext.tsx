import React, { createContext, useState, useContext, ReactNode, useEffect, useCallback } from 'react';

type Language = 'en' | 'pt';

interface LanguageContextType {
    language: Language;
    setLanguage: (language: Language) => void;
    t: (key: string, replacements?: { [key: string]: string }) => string;
}

const translations: { [lang in Language]: { [key: string]: string } } = {
  en: {
    title: "Flags of the World Explorer",
    headerTitle: "Flags of the World",
    explorer: "Explorer",
    exploreTitle: "Flag of the Day",
    exploreSubtitle: "Discover the stories, symbols, and colors behind the flags of nations. Use the filters below to navigate through the rich tapestry of global heraldry.",
    searchPlaceholder: "Search by country name...",
    fetchError: "Failed to fetch country data. Please try again later.",
    errorOops: "Oops! Something went wrong.",
    noResults: "No flags match your search criteria.",
    noFlagsFound: "No Flags Found",
    noFlagsFoundDescription: "Try adjusting your search or filter to find what you're looking for.",
    viewDetailsFor: "View details for {{countryName}}",
    closeModal: "Close modal",
    continents: "Continent(s)",
    capital: "Capital",
    population: "Population",
    area: "Area",
    areaUnit: "km¬≤",
    coatOfArms: "Coat of Arms",
    viewOnMap: "View on Google Maps",
    goToTop: "Go to top",
    footerRights: `¬© ${new Date().getFullYear()} Flags of the World Explorer. All rights reserved.`,
    footerBuiltWith: "Built with React & Tailwind CSS | Data from REST Countries API",
    showingFlags: "Showing {{count}} of {{total}} flags",
    loadingFlags: "Loading flags from around the globe...",
    startQuiz: "Start Quiz",
    quizTitle: "Flag Quiz",
    questionOf: "Question {{current}} of {{total}}",
    whichCountry: "Which country's flag is this?",
    whichFlag: "Which flag belongs to {{country}}?",
    nextQuestion: "Next Question",
    quizResults: "Quiz Results",
    yourScore: "You scored {{score}} out of {{total}}",
    playAgain: "Play Again",
    backToExplorer: "Back to Explorer",
    scoreFeedbackExcellent: "Excellent! You're a flag expert!",
    scoreFeedbackGood: "Good job! You know your flags well.",
    scoreFeedbackAverage: "Not bad! A little more practice and you'll be an expert.",
    scoreFeedbackPoor: "Keep practicing! The world of flags is fascinating.",
    askAI: "Ask AI about {{countryName}}",
    aiThinking: "Thinking...",
    aiError: "Sorry, I couldn't fetch insights right now. Please try again.",
    aiInsightsTitle: "AI-Powered Insights",
    discoverTitle: "Discover",
    discoverLoading: "Curating a new collection for you...",
    flagOfTheDay: "Flag of the Day",
    flagOfTheDayLoading: "Selecting today's featured flag...",
    filterAndSearch: "Filter & Search",
    filterByContinent: "Filter by Continent",
    quizSetupTitle: "Quiz Setup",
    chooseMode: "Choose a Game Mode",
    selectDifficulty: "Select Difficulty",
    difficultyEasy: "Easy",
    difficultyMedium: "Medium",
    difficultyHard: "Hard",
    difficultyEasyDesc: "Most populous countries.",
    difficultyMediumDesc: "A mix of all countries.",
    difficultyHardDesc: "Lesser-known countries.",
    modeFlagToCountry: "Flag ‚ûû Country",
    modeFlagToCountryDesc: "Guess the country from its flag.",
    modeCountryToFlag: "Country ‚ûû Flag",
    modeCountryToFlagDesc: "Find the correct flag for the country.",
    modeFlagToCapital: "Flag ‚ûû Capital",
    modeFlagToCapitalDesc: "Identify the capital from the flag.",
    modeCountryToCapital: "Country ‚ûû Capital",
    modeCountryToCapitalDesc: "Guess the capital of the country.",
    whichCapitalForCountry: "What is the capital of {{country}}?",
    modeShapeToCountry: "Coat of Arms ‚ûû Country",
    modeShapeToCountryDesc: "Recognize the country by its coat of arms.",
    whichCapital: "Which capital city does this flag belong to?",
    whichCoatOfArms: "Which country's coat of arms is this?",
    backToMenu: "Back to Menu",
    quizTime: "Total Time",
    quizAvgTime: "Avg. Time / Q",
    quizSeconds: "{{seconds}}s",
    aiUnavailable: "AI features are unavailable. Please check your API key configuration.",
    compareMode: "Compare Mode",
    compareModeTooltip: "Toggle to select two flags for comparison",
    exitCompareMode: "Exit Compare Mode",
    selectForComparison: "Select {{countryName}} for comparison",
    compareFlags: "Compare ({{count}}/2)",
    clearSelection: "Clear",
    comparisonTitle: "Flag Comparison",
    aiComparisonTitle: "AI Vexillology Analysis",
    aiComparing: "Analyzing flags...",
    aiSearchPlaceholder: "Ask AI: 'flags with a moon', etc.",
    aiSearchError: "Sorry, the AI search failed. Please try again.",
    aiSearching: "AI is searching...",
    aiFilterActive: "Showing AI results for: \"{{query}}\"",
    clearAiFilter: "Clear",
    favorites: "Favorites",
    noFavorites: "No favorites yet!",
    noFavoritesDescription: "Click the heart on any flag to add it to your collection.",
    addToFavorites: "Add to favorites",
    removeFromFavorites: "Remove from favorites",
    addedToFavoritesToast: "{{countryName}} added to favorites!",
    removedFromFavoritesToast: "{{countryName}} removed from favorites.",
    similarFlagsTitle: "You Might Also Like",
    toggleTheme: "Toggle theme",
    quickFact: "Get a quick fact",
    loadingFact: "Loading fact...",
    filterByColor: "Filter by Color",
    searchByColor: "Search by Color",
    aiColorFilterActive: "Showing AI results for colors:",
    clearColorFilter: "Clear",
    continentTab: "Continents",
    aiSearchTab: "AI Search",
    toolsTab: "Tools",
    quizStreak: "üî• {{count}} Streak",
    quizHint: "Hint ({{count}} left)",
    quizNoHints: "No hints left",
    quizReviewAnswers: "Review Answers",
    quizBackToSummary: "Back to Summary",
    quizReviewTitle: "Quiz Review",
    quizYourAnswer: "Your answer:",
    quizCorrectAnswer: "Correct answer:",
    continentHint: "Hint: The country is in {{continent}}.",
    quizBestStreak: "Best Streak",
    quizAccuracy: "Accuracy",
    quizRank: "Your Rank",
    rankNovice: "Flag Novice",
    rankApprentice: "Flag Apprentice",
    rankAdept: "Vexillology Adept",
    rankExpert: "Flag Expert",
    rankMaster: "Geography Genius",
    quiz5050Hint: "50:50 ({{count}} left)",
    quizNo5050Hints: "No 50:50s left",
    quizCorrect: "Correct",
    quizIncorrect: "Incorrect",
  },
  pt: {
    title: "Explorador de Bandeiras do Mundo",
    headerTitle: "Bandeiras do Mundo",
    explorer: "Explorador",
    exploreTitle: "Bandeira do Dia",
    exploreSubtitle: "Descubra as hist√≥rias, s√≠mbolos e cores por tr√°s das bandeiras das na√ß√µes. Use os filtros abaixo para navegar pela rica tape√ßaria da her√°ldica global.",
    searchPlaceholder: "Pesquisar por nome do pa√≠s...",
    fetchError: "Falha ao buscar dados dos pa√≠ses. Por favor, tente novamente mais tarde.",
    errorOops: "Opa! Algo deu errado.",
    noResults: "Nenhuma bandeira corresponde aos seus crit√©rios de pesquisa.",
    noFlagsFound: "Nenhuma Bandeira Encontrada",
    noFlagsFoundDescription: "Tente ajustar sua busca ou filtro para encontrar o que procura.",
    viewDetailsFor: "Ver detalhes de {{countryName}}",
    closeModal: "Fechar modal",
    continents: "Continente(s)",
    capital: "Capital",
    population: "Popula√ß√£o",
    area: "√Årea",
    areaUnit: "km¬≤",
    coatOfArms: "Bras√£o de Armas",
    viewOnMap: "Ver no Google Maps",
    goToTop: "Ir para o topo",
    footerRights: `¬© ${new Date().getFullYear()} Explorador de Bandeiras do Mundo. Todos os direitos reservados.`,
    footerBuiltWith: "Constru√≠do com React & Tailwind CSS | Dados da API REST Countries",
    showingFlags: "Mostrando {{count}} de {{total}} bandeiras",
    loadingFlags: "Carregando bandeiras de todo o mundo...",
    startQuiz: "Iniciar Quiz",
    quizTitle: "Quiz de Bandeiras",
    questionOf: "Quest√£o {{current}} de {{total}}",
    whichCountry: "De que pa√≠s √© esta bandeira?",
    whichFlag: "Qual bandeira pertence a {{country}}?",
    nextQuestion: "Pr√≥xima Pergunta",
    quizResults: "Resultados do Quiz",
    yourScore: "Voc√™ acertou {{score}} de {{total}}",
    playAgain: "Jogar Novamente",
    backToExplorer: "Voltar ao Explorador",
    scoreFeedbackExcellent: "Excelente! Voc√™ √© um expert em bandeiras!",
    scoreFeedbackGood: "Bom trabalho! Voc√™ conhece bem as bandeiras.",
    scoreFeedbackAverage: "Nada mal! Com um pouco mais de pr√°tica voc√™ ser√° um expert.",
    scoreFeedbackPoor: "Continue praticando! O mundo das bandeiras √© fascinante.",
    askAI: "Perguntar √† IA sobre {{countryName}}",
    aiThinking: "Pensando...",
    aiError: "Desculpe, n√£o consegui buscar os insights no momento. Por favor, tente novamente.",
    aiInsightsTitle: "Insights da IA",
    discoverTitle: "Descubra",
    discoverLoading: "Criando uma nova cole√ß√£o para voc√™...",
    flagOfTheDay: "Bandeira do Dia",
    flagOfTheDayLoading: "Selecionando a bandeira em destaque de hoje...",
    filterAndSearch: "Filtrar e Pesquisar",
    filterByContinent: "Filtrar por Continente",
    quizSetupTitle: "Configura√ß√£o do Quiz",
    chooseMode: "Escolha um Modo de Jogo",
    selectDifficulty: "Selecione a Dificuldade",
    difficultyEasy: "F√°cil",
    difficultyMedium: "M√©dio",
    difficultyHard: "Dif√≠cil",
    difficultyEasyDesc: "Pa√≠ses mais populosos.",
    difficultyMediumDesc: "Uma mistura de todos os pa√≠ses.",
    difficultyHardDesc: "Pa√≠ses menos conhecidos.",
    modeFlagToCountry: "Bandeira ‚ûû Pa√≠s",
    modeFlagToCountryDesc: "Adivinhe o pa√≠s pela bandeira.",
    modeCountryToFlag: "Pa√≠s ‚ûû Bandeira",
    modeCountryToFlagDesc: "Encontre a bandeira correta para o pa√≠s.",
    modeFlagToCapital: "Bandeira ‚ûû Capital",
    modeFlagToCapitalDesc: "Identifique a capital pela bandeira.",
    modeCountryToCapital: "Pa√≠s ‚ûû Capital",
    modeCountryToCapitalDesc: "Adivinhe a capital do pa√≠s.",
    whichCapitalForCountry: "Qual √© a capital de {{country}}?",
    modeShapeToCountry: "Bras√£o ‚ûû Pa√≠s",
    modeShapeToCountryDesc: "Reconhe√ßa o pa√≠s pelo seu bras√£o de armas.",
    whichCapital: "A qual cidade capital esta bandeira pertence?",
    whichCoatOfArms: "De que pa√≠s √© este bras√£o de armas?",
    backToMenu: "Voltar ao Menu",
    quizTime: "Tempo Total",
    quizAvgTime: "Tempo M√©dio / Q",
    quizSeconds: "{{seconds}}s",
    aiUnavailable: "Recursos de IA indispon√≠veis. Verifique a configura√ß√£o da sua chave de API.",
    compareMode: "Modo de Compara√ß√£o",
    compareModeTooltip: "Ative para selecionar duas bandeiras para compara√ß√£o",
    exitCompareMode: "Sair do Modo de Compara√ß√£o",
    selectForComparison: "Selecionar {{countryName}} para compara√ß√£o",
    compareFlags: "Comparar ({{count}}/2)",
    clearSelection: "Limpar",
    comparisonTitle: "Compara√ß√£o de Bandeiras",
    aiComparisonTitle: "An√°lise de Vexilologia por IA",
    aiComparing: "Analisando bandeiras...",
    aiSearchPlaceholder: "Pergunte √† IA: 'bandeiras com uma lua', etc.",
    aiSearchError: "Desculpe, a busca com IA falhou. Tente uma consulta diferente.",
    aiSearching: "A IA est√° pesquisando...",
    aiFilterActive: "Mostrando resultados da IA para: \"{{query}}\"",
    clearAiFilter: "Limpar",
    favorites: "Favoritos",
    noFavorites: "Nenhum favorito ainda!",
    noFavoritesDescription: "Clique no cora√ß√£o em qualquer bandeira para adicion√°-la √† sua cole√ß√£o.",
    addToFavorites: "Adicionar aos favoritos",
    removeFromFavorites: "Remover dos favoritos",
    addedToFavoritesToast: "{{countryName}} adicionado aos favoritos!",
    removedFromFavoritesToast: "{{countryName}} removido dos favoritos.",
    similarFlagsTitle: "Voc√™ Tamb√©m Pode Gostar",
    toggleTheme: "Alternar tema",
    quickFact: "Obter um fato r√°pido",
    loadingFact: "Carregando fato...",
    filterByColor: "Filtrar por Cor",
    searchByColor: "Pesquisar por Cor",
    aiColorFilterActive: "Mostrando resultados da IA para cores:",
    clearColorFilter: "Limpar",
    continentTab: "Continentes",
    aiSearchTab: "Busca IA",
    toolsTab: "Ferramentas",
    quizStreak: "üî• Sequ√™ncia de {{count}}",
    quizHint: "Dica (restam {{count}})",
    quizNoHints: "Nenhuma dica restante",
    quizReviewAnswers: "Rever Respostas",
    quizBackToSummary: "Voltar ao Resumo",
    quizReviewTitle: "Revis√£o do Quiz",
    quizYourAnswer: "Sua resposta:",
    quizCorrectAnswer: "Resposta correta:",
    continentHint: "Dica: O pa√≠s fica em {{continent}}.",
    quizBestStreak: "Melhor Sequ√™ncia",
    quizAccuracy: "Precis√£o",
    quizRank: "Sua Classifica√ß√£o",
    rankNovice: "Iniciante em Bandeiras",
    rankApprentice: "Aprendiz de Bandeiras",
    rankAdept: "Adepto em Vexilologia",
    rankExpert: "Expert em Bandeiras",
    rankMaster: "G√™nio da Geografia",
    quiz5050Hint: "50:50 (restam {{count}})",
    quizNo5050Hints: "Nenhuma 50:50 restante",
    quizCorrect: "Corretas",
    quizIncorrect: "Incorretas",
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [language, setLanguageState] = useState<Language>(() => {
        const savedLang = localStorage.getItem('language') as Language;
        return savedLang || 'en';
    });

    const setLanguage = (lang: Language) => {
        localStorage.setItem('language', lang);
        setLanguageState(lang);
    };

    const t = useCallback((key: string, replacements?: { [key: string]: string }) => {
        let translation = translations[language][key] || key;
        if (replacements) {
            Object.keys(replacements).forEach(placeholder => {
                translation = translation.replace(`{{${placeholder}}}`, replacements[placeholder]);
            });
        }
        return translation;
    }, [language]);
    
    useEffect(() => {
        document.documentElement.lang = language;
        document.title = t('title');
    }, [language, t]);

    return (
        <LanguageContext.Provider value={{ language, setLanguage, t }}>
            {children}
        </LanguageContext.Provider>
    );
};

export const useLanguage = (): LanguageContextType => {
    const context = useContext(LanguageContext);
    if (!context) {
        throw new Error('useLanguage must be used within a LanguageProvider');
    }
    return context;
};